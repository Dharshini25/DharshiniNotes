JAVA:
=>Any hardware or software environment in which a program runs, is known as a platform.
=>Java provides a software-based platform.
=>JVM, JRE, and JDK are platform dependent because the configuration of each OS is different from each other. 
=>However, Java is platform independent.
=>Since Java has a Runtime Environment (JRE) & API(Application Programming Interface), it is called a platform.
=>Java is an object-oriented programming language. Everything in Java is an OBJECT=> DATA + BEHAVIOUR

=>Write Once and Run Anywhere (WORA):
Java code is compiled by the compiler and converted into bytecode. 
Java code(Demo.java) -> Complier -> Byte code(Demo.class)
=>This bytecode is a platform-independent code because it can be run on multiple platforms likt Windows,MacOS,Linux
=>No explicit pointer
=>Java Programs run inside a virtual machine sandbox

=>JVM:(Java Virtual Machine)
->JVM is a virtual machine because it doesn't physically exist.
->provides a runtime environment in which Java bytecode can be executed.
-> Whenever you write java command on the command prompt to run the java class, an instance of JVM is created.
->The JVM performs the following main tasks:
Loads code
Verifies code
Executes code
Provides runtime environment

=>JRE(Java Runtime Environment):
->physically exists
->implementation of JVM (contains a set of libraries + other files that JVM uses at runtime.)
->set of software tools which are used for developing Java applications.

=>JDK(Java Development Kit):
->physically exists
->(JDK) is a software development environment which is used to develop Java applications and applets. 

Variables 
->memory location
->3 types:
Local variable:  declared inside the body of the method
Instance variable: declared inside the class but outside the body of the method
Static variable:  declared as static is called a static variable
Datatypes: (2 types)
Primitive(boolean,char,int,float,byte,double,short,long)-which cannot be broken down 
Non-Primitive (array,string,classes,interfaces)-which can be broken down(array broken into elements & string can be broken into characters)

1)Java Left Shift Operator
(a<<b) Eg:(10<<3) 10*2=20,20*2=40,40*2=80 Ans:80
2)Java Right Shift Operator
(a>>b) Eg:(60>>2) 60/2=30,30/2=15 Ans:15
3)Java AND Operator Example: Logical && and Bitwise &
The logical && operator doesn't check the second condition if the first condition is false.
It checks the second condition only if the first one is true.
The bitwise & operator always checks both conditions whether first condition is true or false.
4)Java OR Operator Example: Logical || and Bitwise |
The logical || operator doesn't check the second condition if the first condition is true. 
It checks the second condition only if the first one is false.
The bitwise | operator always checks both conditions whether first condition is true or false.
5)Java Assignment Operator
nt a=10;  
int b=20;  
a+=4;//a=a+4 (a=10+4)  
b-=4;//b=b-4 (b=20-4)  
6)If in short then type casting is manadatory otherwise compile time error
a=(short)(a+b);//20 which is int now converted to short  

OBJECT:
->Object(or entity) - has state(data/value) & behaviour(functionality) & identity(used by JVM to identify each objects uniquely)
 Eg:Car(object) - Color,price,engine(state) & Moving/Rest(behaviour)
->instance of a class
->space in memory
CLASS:
->Collection of objects is called class. 
->It is a logical entity.
->doesn't consume any space.

INHERITANCE:
->When one object acquires all the properties and behaviors of a parent object, it is known as inheritance. 
->It is used to achieve runtime polymorphism.
->Multiple inheritance not in java
->Always create object for childclass (extends keyword)

POLYMORPHISM:
->If one task is performed in different ways, it is known as polymorphism.

METHOD OVERLOADING:
->compile time polymorphism
->If a class has multiple methods having same name but different parameters
METHOD OVERRIDING:
->run time polymorphism
->The method must have the same name as in the parent class
  The method must have the same parameter as in the parent class.
->All the functionality of the parent class must be reimplemented in the child class
->We can't override main method in java because it is a static method
  Because static method belongs/bounded to the class(class area)
  And instance method belongs/bounded to the object(heap area)

ABSTRACTION:
->Hiding internal details and showing functionality is known as abstraction
Abstract class:
->abstract class consists of abstract keyword
->abstract class contains abstract method(manadatory) & also non-abstract keywords
->abstract method has only declaration and no body
->We cannot create objects of an abstract class.
  To implement features of an abstract class, we inherit subclasses from it and create objects of the subclass.
  A subclass must override all abstract methods of an abstract class.

INTERFACE:
->Interface is 100% Abstract class.
->Instead of multiple inheritance
1.class extends class
2.class implements interface
3.interface extends interface

CONSTRUCTOR:
->It is a special type of method 
->used to initialize the object.
->Every time an object is created using the new() keyword, at least one constructor is called.
->Constructor name must be the same as its class name
->constructor is just like a method but without return type(You cannot use return type yet it returns a value)

ENCAPSULATION:
->Binding (or wrapping) code and data together into a single unit are known as encapsulation.
->getter (return name) and setter methods (this.name=name)

Syntax:
Classname object=new Classname()

Packages:
import java.lang.*; ->includes System.class,String.class
import java.util.*; ->includes Map.class,ArrayList.class
import java.awt.*;  ->includes Button.class

->Static variable will get the memory only once, if any object changes the value of the static variable, it will retain its value.
->If the static keyword not present in public static void main(String args[]) means, then JVM itself will create an object first that would lead to extra memory allocation
->Super keyword is used to immediate parent class method,instance variable,constructor
->Final keyword stops value change,stop inheritance,stop  method overriding

ACCESS MODIFIERS:
1.Public : can be accessed within and outside the class , within & outside the package
2.Private: can be accessed only within the class
3.Default: can be accesssed only within the package
4.Protected: can be accessed both within the package and by using child class can access it outside the package

JAVA ARRAYS:
->Java array is an object which contains elements of a similar data type.
->We can store only the fixed size of elements in the array. It doesn't grow its size at runtime.
  To solve this problem, COLLECTION FRAMEWORK is used in Java which grows automatically.
SYNTAX:
int a[]=new int[5];

WRAPPER CLASS:
->The wrapper class in Java provides the mechanism to convert primitive into object and object into primitive.
->The eight classes of the java.lang package are known as wrapper classes in Java.
Primitive to Wrapper class:
1.Autoboxing
int a=20;  
Integer i=Integer.valueOf(a);
Integer j=a;//the value of 'j' won't change
2.Unboxing
Integer a=new Integer(3);    
int i=a.intValue();
int j=a;//the value of 'j' won't change

->There is only call by value in java, not call by reference
->To create the document API, you need to use the javadoc tool followed by java file name. 
  There is no need to compile the javafile.

JAVA STRINGS:
->String - sequence of characters
->Java String is an object
->In Java, String objects are immutable. Immutable simply means unmodifiable or unchangeable.

SYNTAX:
char[] ch={'d','h','a','r','s','h','i','n','i'};  
String s=new String(ch);  
       (or)
String s="dharshini";  

PROGRAM:
/******************************************************************************
public class Main
{
	public static void main(String[] args) {
		/*int a[]=new int[5];
		a[0]=1;
		a[1]=2;
		a[2]=3;
		a[3]=4;
		a[4]=5;
		for(int i=0;i<a.length;i++)
		{
		System.out.println(a[i]);
		}*/
		char a[]={'H','E','L','L','O'};
		String str=new String(a);
		System.out.println(str);
	}
}
\/******************************************************************************
 
COLLECTION:
Collection - Collection of objects
1.) java.util.Arrays Class - Sort methods
    
   int arr[]={35,94,17,69,41}
   Arrays.sort(arr)

   String names[]={"arun","viyan","kavin","sita"}
   Arrays.sort(names)

2.)To check whether the elements in 2 arrays are equal
   int a[]={10,20,30}
   int b[]={10,20,30}
   boolean same=Arrays.equals(a,b);

COLLECTION FRAMEWORK:
1.INTERFACE:
2.CLASS
3.DATA STRUCTURE:       

******************************************************************************

//creating arraylist 
List<String> a=new ArrayList<String>(); 
//adding object in arraylist
  a.add("Vijay");    
  a.add("Ravi");    
  a.add("Arjun"); 
//Creating a list of numbers  
  List<Integer> list2=new ArrayList<Integer>();  
  list2.add(21);  
  list2.add(11);  
  list2.add(51);     
 Collections.sort(list2);  

//creating linkedlist 
List<String> b=new LinkedList<String>(); 
//adding object in linkedlist     
  b.add("James");    
  b.add("Serena");    
  b.add("Swati");    

OUTPUT:
[Vijay,Ravi,Arjun]
11
21
51
[James,Serena,Swati]      


list.
----------------------------------------------------------------
To get input:
 import java.util.*;
import java.lang.*;
public class Main {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);// For arrays
        Scanner oc = new Scanner(System.in);// For Strings
        int a[]=new int[5];
        String arr[]=new String[4];
     // INPUT
        for(int i=0;i<a.length;i++)
        {
            a[i]=sc.nextInt();
        }

        for(int i=0;i<arr.length;i++)
        {
            arr[i]=oc.nextLine();
        }
    // OUT

        System.out.println("Numbers:\n");
        for(int i=0;i<a.length;i++)
        {
            System.out.println(a[i]+" ");
        }
        System.out.println("Strings:\n");
        for(int i=0;i<arr.length;i++)
        {
            System.out.println(arr[i]+" ");
        }

    }
}
--------------------------------------------------------------------

import java.util.*;
import java.lang.*;
public class Main {
    public static void main(String[] args) {

       int a[]={1,2,3,4,5};
       String b[]={"riya","saki","virat","gayu","alia"};
// To print the output
       System.out.println(Arrays.toString(a));
        System.out.println(Arrays.toString(b));
    }
}

OUTPUT:
[1, 2, 3, 4, 5]
[riya, siya, virat, gigar, alia]
---------------------------------------------------------